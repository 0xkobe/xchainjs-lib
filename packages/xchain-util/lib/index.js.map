{"version":3,"file":"index.js","sources":["../src/async.ts","../src/bn.ts","../src/string.ts","../src/chain.const.ts","../src/chain.ts","../src/types.ts","../src/asset.ts","../src/calc/swap.ts","../src/calc/stake.ts","../src/memo.ts"],"sourcesContent":["/**\n * Helper to delay anything within an `async` function\n *\n * @param ms delay in milliseconds\n *\n * @example\n *\n * const anyAsyncFunc = async () => {\n *  // do something\n *  console.log('before delay')\n *  // wait for 200ms\n *  await delay(200)\n *  // and do other things\n *  console.log('after delay')\n * }\n */\nexport const delay = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms))\n","import BigNumber from 'bignumber.js'\n\n/**\n * Shortcut to create a BigNumber\n */\nconst bn = (value: BigNumber.Value) => new BigNumber(value)\n\n/**\n * Helper to check whether a BigNumber is valid or not\n * */\nexport const isValidBN = (value: BigNumber) => !value.isNaN()\n\n/**\n * Helper to create a big number from string or number\n * If it fails to create a big number, a big number with value 0 will be returned instead\n * */\nexport const bnOrZero = (value: string | number | undefined) => {\n  const b = value ? bn(value) : bn(0)\n  return isValidBN(b) ? b : bn(0)\n}\n\n/**\n * Helper to validate a possible BigNumber\n * If the given valie is invalid or undefined, 0 is returned as a BigNumber\n */\nexport const validBNOrZero = (value: BigNumber | undefined) => (value && isValidBN(value) ? value : bn(0))\n\n/**\n * Format a BaseNumber to a string depending on given decimal places\n * */\nexport const formatBN = (value: BigNumber, decimalPlaces = 2) => value.toFormat(decimalPlaces)\n\nexport enum SymbolPosition {\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n/**\n * Formats a big number value by prefixing it with `$`\n */\nexport const formatBNCurrency = (\n  n: BigNumber,\n  decimalPlaces = 2,\n  symbol = '$',\n  position: SymbolPosition = SymbolPosition.BEFORE,\n) => {\n  const value = formatBN(n, decimalPlaces)\n  if (position === SymbolPosition.BEFORE) {\n    return `${symbol}${value}`\n  }\n  return `${value}${symbol}`\n}\n\n/**\n * Helper to get a fixed `BigNumber`\n * Returns zero `BigNumber` if `value` is invalid\n * */\nexport const fixedBN = (value: number | string | BigNumber | undefined, decimalPlaces = 2): BigNumber => {\n  const n = bn(value || 0)\n  const fixedBN = isValidBN(n) ? n.toFixed(decimalPlaces) : bn(0).toFixed(decimalPlaces)\n  return bn(fixedBN)\n}\n\nexport default bn\n","/**\n * Removes leading / trailing zeros from a string of numbers\n * (1) Regex to remove trailing zeros https://stackoverflow.com/a/53397618/2032698\n * (2) Regex to remove leading zeros https://www.oreilly.com/library/view/regular-expressions-cookbook/9781449327453/ch06s06.html\n */\nexport const trimZeros = (value: string) =>\n  value\n    // (1) remove trailing zeros\n    .replace(/(\\.[0-9]*[1-9])0+$|\\.0*$/, '$1')\n    // (2) remove leading zeros\n    .replace(/\\b0*([1-9][0-9]*|0)\\b/, '$1')\n","/**\n * Chains\n *\n * Based on definition in Thorchain `common`\n * https://gitlab.com/thorchain/thornode/-/blob/master/common/chain.go#L15-18\n */\nexport const BNBChain = 'BNB'\nexport const BTCChain = 'BTC'\nexport const ETHChain = 'ETH'\nexport const THORChain = 'THOR'\n\n/**\n * All possible chains Thornode currently supports (or plan to support in near future)\n * */\nexport const chains = [BNBChain, BTCChain, ETHChain, THORChain] as const\n","import { chains } from './chain.const'\nimport { Chain } from './types'\n\n/**\n * Type guard to check whether string  is based on type `Chain`\n */\nexport const isChain = (c: string): c is Chain => chains.includes(c as Chain)\n\nexport const chainToString = (chainId: Chain) => {\n  switch (chainId) {\n    case 'THOR':\n      return 'Thorchain'\n    case 'BTC':\n      return 'Bitcoin'\n    case 'ETH':\n      return 'Ethereum'\n    case 'BNB':\n      return 'Binance Chain'\n    default:\n      return 'unknown chain'\n  }\n}\n","import BigNumber from 'bignumber.js'\nimport { chains } from './chain.const'\n\nexport enum Denomination {\n  /**\n   * values for asset amounts in base units (no decimal)\n   */\n  BASE = 'BASE',\n  /**\n   * values of asset amounts (w/ decimal)\n   */\n  ASSET = 'ASSET',\n}\n\ntype Amount<T> = {\n  type: T\n  amount: () => BigNumber\n  decimal: number\n}\n\nexport type BaseAmount = Amount<Denomination.BASE>\nexport type AssetAmount = Amount<Denomination.ASSET>\n\nexport type Amounts = AssetAmount | BaseAmount\n\n// Chain type to includes types of all possible chains\nexport type Chain = typeof chains[number]\n\nexport type Asset = {\n  chain: Chain\n  symbol: string\n  ticker: string\n}\n","import BigNumber from 'bignumber.js'\nimport { fixedBN, formatBN } from './bn'\nimport { trimZeros as trimZerosHelper } from './string'\nimport { BTCChain, BNBChain, ETHChain, THORChain } from './chain.const'\nimport { isChain } from './chain'\nimport { Denomination, AssetAmount, BaseAmount, Amounts, Asset } from './types'\n\n/**\n * Default number of asset decimals\n *\n * For history reason and by starting the project on Binance chain assets, it's 8 decimal.\n *\n * For example:\n * RUNE has a maximum of 8 digits of decimal\n * 0.00000001 RUNE == 1 รฐ (tor)\n * */\nconst ASSET_DECIMAL = 8\n\n/**\n * Factory to create values of assets (e.g. RUNE)\n *\n * @param value - Asset amount - If the value is undefined, AssetAmount with value `0` will be returned\n * @param decimal (optional) - Decimal places - default 8\n *\n **/\nexport const assetAmount = (value: string | number | BigNumber | undefined, decimal: number = ASSET_DECIMAL) =>\n  ({\n    type: Denomination.ASSET,\n    amount: () => fixedBN(value, decimal),\n    decimal,\n  } as AssetAmount)\n\n/**\n * Factory to create base amounts (e.g. tor)\n *\n * @param value - Base amount - If the value is undefined, BaseAmount with value `0` will be returned\n * @param decimal - Decimal places - default 8\n *\n **/\nexport const baseAmount = (value: string | number | BigNumber | undefined, decimal: number = ASSET_DECIMAL) =>\n  ({\n    type: Denomination.BASE,\n    amount: () => fixedBN(value, 0),\n    decimal,\n  } as BaseAmount)\n\n/**\n * Helper to convert values for a asset from base values (e.g. RUNE from tor)\n * */\nexport const baseToAsset = (base: BaseAmount): AssetAmount => {\n  const decimal = base.decimal\n  const value = base\n    .amount()\n    .div(10 ** decimal)\n    .decimalPlaces(decimal)\n  return assetAmount(value, decimal)\n}\n\n/**\n * Helper to convert asset to base values (e.g. tor -> RUNE)\n * */\nexport const assetToBase = (asset: AssetAmount): BaseAmount => {\n  const value = asset\n    .amount()\n    .multipliedBy(10 ** asset.decimal)\n    .integerValue()\n  return baseAmount(value)\n}\n\n/**\n * Guard to check whether value is an amount of asset or not\n * */\nexport const isAssetAmount = (v: Amounts): v is AssetAmount => (v as AssetAmount).type === Denomination.ASSET\n\n/**\n * Guard to check whether value is an amount of a base value or not\n * */\nexport const isBaseAmount = (v: Amounts): v is BaseAmount => (v as BaseAmount).type === Denomination.BASE\n\n/**\n * Formats an `AssetAmount` into `string` based on decimal places\n *\n * If `decimal` is not set, `amount.decimal` is used\n * Note: `trimZeros` wins over `decimal`\n */\nexport const formatAssetAmount = ({\n  amount,\n  decimal,\n  trimZeros = false,\n}: {\n  amount: AssetAmount\n  decimal?: number\n  trimZeros?: boolean\n}) => {\n  const formatted = formatBN(amount.amount(), decimal || amount.decimal)\n  // Note: `trimZeros` wins over `decimal`\n  return trimZeros ? trimZerosHelper(formatted) : formatted\n}\n\n/**\n * Formats a `BaseAmount` value into a `string`\n */\nexport const formatBaseAmount = (amount: BaseAmount) => formatBN(amount.amount(), 0)\n\n/**\n * Base \"chain\" assets\n *\n * Based on definition in Thorchain `common`\n * see https://gitlab.com/thorchain/thornode/-/blob/master/common/asset.go#L12-24\n */\nexport const AssetBNB: Asset = { chain: BNBChain, symbol: 'BNB', ticker: 'BNB' }\nexport const AssetBTC: Asset = { chain: BTCChain, symbol: 'BTC', ticker: 'BTC' }\nexport const AssetETH: Asset = { chain: ETHChain, symbol: 'ETH', ticker: 'ETH' }\n\nexport const RUNE_TICKER = 'RUNE'\n// Rune67CAsset RUNE on Binance test net\nexport const AssetRune67C: Asset = { chain: BNBChain, symbol: 'RUNE-67C', ticker: RUNE_TICKER }\n// RuneB1AAsset RUNE on Binance main net\nexport const AssetRuneB1A: Asset = { chain: BNBChain, symbol: 'RUNE-B1A', ticker: RUNE_TICKER }\nexport const AssetRuneNative: Asset = { chain: THORChain, symbol: RUNE_TICKER, ticker: RUNE_TICKER }\n\n/**\n * Helper to check whether asset is valid\n */\nexport const isValidAsset = (a: Asset): boolean => !!a.chain && !!a.ticker && !!a.symbol\n\n/**\n * Creates an `Asset` by a given string\n *\n * This helper function expects a string with following naming convention:\n * `AAA.BBB-CCC`\n * where\n * chain: `AAA`\n * ticker (optional): `BBB`\n * symbol: `BBB-CCC` or `CCC` (if no ticker available)\n *\n * @see  https://docs.thorchain.org/developers/transaction-memos#asset-notation\n *\n * If the naming convention fails, it returns null\n */\nexport const assetFromString = (s: string): Asset | null => {\n  const data = s.split('.')\n  if (data.length <= 1 || data[1]?.length < 1) {\n    return null\n  }\n\n  const chain = data[0]\n  // filter out not supported string of chains\n  if (!chain || !isChain(chain)) return null\n\n  const symbol = data[1]\n  const ticker = symbol.split('-')[0]\n\n  return { chain, symbol, ticker }\n}\n\n/**\n * Returns an `Asset` as a string using following naming convention:\n *\n * `AAA.BBB-CCC`\n * where\n * chain: `AAA`\n * ticker (optional): `BBB`\n * symbol: `BBB-CCC` or `CCC` (if no ticker available)\n *\n * @see https://docs.thorchain.org/developers/transaction-memos#asset-notation\n *\n */\nexport const assetToString = ({ chain, symbol }: Asset) => `${chain}.${symbol}`\n\n/**\n * Currency symbols currently supported\n */\nexport enum AssetCurrencySymbol {\n  RUNE = 'แฑ',\n  BTC = 'โฟ',\n  SATOSHI = 'โก',\n  ETH = 'ฮ',\n  USD = '$',\n}\n\n/**\n * Returns currency symbols by givven `Asset`\n */\nexport const currencySymbolByAsset = ({ ticker }: Asset) => {\n  switch (true) {\n    case ticker === RUNE_TICKER:\n      return AssetCurrencySymbol.RUNE\n    case ticker === AssetBTC.ticker:\n      return AssetCurrencySymbol.BTC\n    case ticker === AssetETH.ticker:\n      return AssetCurrencySymbol.ETH\n    case ticker.includes('USD'):\n      return AssetCurrencySymbol.USD\n    default:\n      return ticker\n  }\n}\n\n/**\n * Formats an asset amount using its currency symbol\n *\n * If `decimal` is not set, `amount.decimal` is used\n * If `asset` is not set, `$` will be used as currency symbol by default\n * `trimZeros` is `false` by default\n * Note: `trimZeros` wins over `decimal`\n */\nexport const formatAssetAmountCurrency = ({\n  amount,\n  asset,\n  decimal,\n  trimZeros: shouldTrimZeros = false,\n}: {\n  amount: AssetAmount\n  asset?: Asset\n  decimal?: number\n  trimZeros?: boolean\n}) => {\n  const amountFormatted = formatAssetAmount({ amount, decimal: decimal || amount.decimal, trimZeros: shouldTrimZeros })\n  const ticker = asset?.ticker ?? ''\n\n  if (ticker) {\n    // RUNE\n    let regex = new RegExp(`${AssetRune67C.ticker}|${AssetRuneB1A.ticker}|${AssetRuneNative.ticker}`, 'i')\n    if (ticker.match(regex)) return `${AssetCurrencySymbol.RUNE} ${amountFormatted}`\n    // BTC\n    regex = new RegExp(AssetBTC.ticker, 'i')\n    if (ticker.match(new RegExp(AssetBTC.ticker, 'i'))) {\n      const base = assetToBase(amount)\n      // format all < โฟ 0.01 in statoshi\n      if (base.amount().isLessThanOrEqualTo('1000000')) {\n        return `${AssetCurrencySymbol.SATOSHI} ${formatBaseAmount(base)}`\n      }\n      return `${AssetCurrencySymbol.BTC} ${amountFormatted}`\n    }\n    // ETH\n    regex = new RegExp(AssetETH.ticker, 'i')\n    if (ticker.match(regex)) return `${AssetCurrencySymbol.ETH} ${amountFormatted}`\n    // USD\n    regex = new RegExp('USD', 'i')\n    if (ticker.match('USD')) return `${AssetCurrencySymbol.USD} ${amountFormatted}`\n\n    return `${amountFormatted} (${ticker})`\n  }\n\n  return `$ ${amountFormatted}`\n}\n\n/**\n * Formats a `BaseAmount` into a string of an `AssetAmount`\n *\n * If `decimal` is not set, `amount.decimal` is used\n * Note: `trimZeros` wins over `decimal`\n */\nexport const formatBaseAsAssetAmount = ({\n  amount,\n  decimal,\n  trimZeros = false,\n}: {\n  amount: BaseAmount\n  decimal?: number\n  trimZeros?: boolean\n}) => formatAssetAmount({ amount: baseToAsset(amount), decimal, trimZeros })\n","import { baseAmount } from '../asset'\nimport { BaseAmount } from '../types'\nimport BigNumber from 'bignumber.js'\nimport { assetToBase, assetAmount, baseToAsset } from '../asset'\n\nexport type PoolData = {\n  assetBalance: BaseAmount\n  runeBalance: BaseAmount\n}\n\nexport const getSwapOutput = (inputAmount: BaseAmount, pool: PoolData, toRune: boolean): BaseAmount => {\n  // formula: (x * X * Y) / (x + X) ^ 2\n  const x = inputAmount.amount()\n  const X = toRune ? pool.assetBalance.amount() : pool.runeBalance.amount() // input is asset if toRune\n  const Y = toRune ? pool.runeBalance.amount() : pool.assetBalance.amount() // output is rune if toRune\n  const numerator = x.times(X).times(Y)\n  const denominator = x.plus(X).pow(2)\n  const result = numerator.div(denominator)\n  return baseAmount(result)\n}\n\nexport const getSwapOutputWithFee = (\n  inputAmount: BaseAmount,\n  pool: PoolData,\n  toRune: boolean,\n  transactionFee: BaseAmount = assetToBase(assetAmount(1)),\n): BaseAmount => {\n  // formula: getSwapOutput() - one RUNE\n  const x = inputAmount.amount()\n  const r = getSwapOutput(inputAmount, pool, toRune)\n  const poolAfterTransaction: PoolData = toRune // used to get rune fee price after swap\n    ? {\n        assetBalance: baseAmount(pool.assetBalance.amount().plus(x)), // add asset input amount to pool\n        runeBalance: baseAmount(pool.runeBalance.amount().minus(r.amount())), // get input price in RUNE and subtract from pool\n      }\n    : {\n        runeBalance: baseAmount(pool.runeBalance.amount().plus(x)), // add RUNE input amount to pool\n        assetBalance: baseAmount(pool.assetBalance.amount().minus(r.amount())), // get input price in RUNE and subtract from pool\n      }\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  const runeFee = toRune ? transactionFee : getValueOfRuneInAsset(transactionFee, poolAfterTransaction) // toRune its one Rune else its asset(oneRune)\n  const result = r.amount().minus(runeFee.amount()) // remove oneRune, or remove asset(oneRune)\n\n  return baseAmount(result)\n}\n\nexport const getSwapInput = (toRune: boolean, pool: PoolData, outputAmount: BaseAmount): BaseAmount => {\n  // formula: (((X*Y)/y - 2*X) - sqrt(((X*Y)/y - 2*X)^2 - 4*X^2))/2\n  // (part1 - sqrt(part1 - part2))/2\n  const X = toRune ? pool.assetBalance.amount() : pool.runeBalance.amount() // input is asset if toRune\n  const Y = toRune ? pool.runeBalance.amount() : pool.assetBalance.amount() // output is rune if toRune\n  const y = outputAmount.amount()\n  const part1 = X.times(Y).div(y).minus(X.times(2))\n  const part2 = X.pow(2).times(4)\n  const result = part1.minus(part1.pow(2).minus(part2).sqrt()).div(2)\n  return baseAmount(result)\n}\n\nexport const getSwapSlip = (inputAmount: BaseAmount, pool: PoolData, toRune: boolean): BigNumber => {\n  // formula: (x) / (x + X)\n  const x = inputAmount.amount()\n  const X = toRune ? pool.assetBalance.amount() : pool.runeBalance.amount() // input is asset if toRune\n  const result = x.div(x.plus(X))\n  return result\n}\n\nexport const getSwapFee = (inputAmount: BaseAmount, pool: PoolData, toRune: boolean): BaseAmount => {\n  // formula: (x * x * Y) / (x + X) ^ 2\n  const x = inputAmount.amount()\n  const X = toRune ? pool.assetBalance.amount() : pool.runeBalance.amount() // input is asset if toRune\n  const Y = toRune ? pool.runeBalance.amount() : pool.assetBalance.amount() // output is rune if toRune\n  const numerator = x.times(x).multipliedBy(Y)\n  const denominator = x.plus(X).pow(2)\n  const result = numerator.div(denominator)\n  return baseAmount(result)\n}\n\nexport const getValueOfAssetInRune = (inputAsset: BaseAmount, pool: PoolData): BaseAmount => {\n  // formula: ((a * R) / A) => R per A (Runeper$)\n  const t = inputAsset.amount()\n  const R = pool.runeBalance.amount()\n  const A = pool.assetBalance.amount()\n  const result = t.times(R).div(A)\n  return baseAmount(result)\n}\n\nexport const getValueOfRuneInAsset = (inputRune: BaseAmount, pool: PoolData): BaseAmount => {\n  // formula: ((r * A) / R) => A per R ($perRune)\n  const r = inputRune.amount()\n  const R = pool.runeBalance.amount()\n  const A = pool.assetBalance.amount()\n  const result = r.times(A).div(R)\n  return baseAmount(result)\n}\n\nexport const getDoubleSwapOutput = (inputAmount: BaseAmount, pool1: PoolData, pool2: PoolData): BaseAmount => {\n  // formula: getSwapOutput(pool1) => getSwapOutput(pool2)\n  const r = getSwapOutput(inputAmount, pool1, true)\n  const output = getSwapOutput(r, pool2, false)\n  return output\n}\n\nexport const getDoubleSwapOutputWithFee = (\n  inputAmount: BaseAmount,\n  pool1: PoolData,\n  pool2: PoolData,\n  transactionFee: BaseAmount = assetToBase(assetAmount(1)),\n): BaseAmount => {\n  // formula: (getSwapOutput(pool1) => getSwapOutput(pool2)) - runeFee\n  const r = getSwapOutput(inputAmount, pool1, true)\n  const output = getSwapOutput(r, pool2, false)\n  const poolAfterTransaction: PoolData = {\n    runeBalance: baseAmount(pool2.runeBalance.amount().plus(r.amount())), // add RUNE output amount to pool\n    assetBalance: baseAmount(pool2.assetBalance.amount().minus(output.amount())), // subtract input amount from pool\n  }\n  const runeFee = getValueOfRuneInAsset(transactionFee, poolAfterTransaction) // asset(oneRune)\n  const result = output.amount().minus(runeFee.amount()) // remove asset(oneRune)\n  return baseAmount(result)\n}\n\nexport const getDoubleSwapInput = (pool1: PoolData, pool2: PoolData, outputAmount: BaseAmount): BaseAmount => {\n  // formula: getSwapInput(pool2) => getSwapInput(pool1)\n  const y = getSwapInput(false, pool2, outputAmount)\n  const x = getSwapInput(true, pool1, y)\n  return x\n}\n\nexport const getDoubleSwapSlip = (inputAmount: BaseAmount, pool1: PoolData, pool2: PoolData): BigNumber => {\n  // formula: getSwapSlip1(input1) + getSwapSlip2(getSwapOutput1 => input2)\n  const swapSlip1 = getSwapSlip(inputAmount, pool1, true)\n  const r = getSwapOutput(inputAmount, pool1, true)\n  const swapSlip2 = getSwapSlip(r, pool2, false)\n  const result = swapSlip1.plus(swapSlip2)\n  return result\n}\n\nexport const getDoubleSwapFee = (inputAmount: BaseAmount, pool1: PoolData, pool2: PoolData): BaseAmount => {\n  // formula: getSwapFee1 + getSwapFee2\n  const fee1 = getSwapFee(inputAmount, pool1, true)\n  const r = getSwapOutput(inputAmount, pool1, true)\n  const fee2 = getSwapFee(r, pool2, false)\n  const fee1Asset = getValueOfRuneInAsset(fee1, pool2)\n  const result = fee2.amount().plus(fee1Asset.amount())\n  return baseAmount(result)\n}\n\nexport const getValueOfAsset1InAsset2 = (inputAsset: BaseAmount, pool1: PoolData, pool2: PoolData): BaseAmount => {\n  // formula: (A2 / R) * (R / A1) => A2/A1 => A2 per A1 ($ per Asset)\n  const oneAsset = assetToBase(assetAmount(1))\n  // Note: All calculation needs to be done in `AssetAmount` (not `BaseAmount`)\n  const A2perR = baseToAsset(getValueOfRuneInAsset(oneAsset, pool2))\n  const RperA1 = baseToAsset(getValueOfAssetInRune(inputAsset, pool1))\n  const result = A2perR.amount().times(RperA1.amount())\n  // transform result back from `AssetAmount` into `BaseAmount`\n  return assetToBase(assetAmount(result))\n}\n","import { baseAmount } from '../asset'\nimport { BaseAmount } from '../types'\nimport { PoolData } from './swap'\nimport BigNumber from 'bignumber.js'\n\nexport type UnitData = {\n  stakeUnits: BaseAmount\n  totalUnits: BaseAmount\n}\n\nexport type StakeData = {\n  asset: BaseAmount\n  rune: BaseAmount\n}\n\nexport const getStakeUnits = (stake: StakeData, pool: PoolData): BaseAmount => {\n  // formula: ((R + T) (r T + R t))/(4 R T)\n  // part1 * (part2 + part3) / denominator\n  const r = stake.rune.amount()\n  const t = stake.asset.amount()\n  const R = pool.runeBalance.amount().plus(r) // Must add r first\n  const T = pool.assetBalance.amount().plus(t) // Must add t first\n  const part1 = R.plus(T)\n  const part2 = r.times(T)\n  const part3 = R.times(t)\n  const numerator = part1.times(part2.plus(part3))\n  const denominator = R.times(T).times(4)\n  const result = numerator.div(denominator)\n  return baseAmount(result)\n}\n\nexport const getPoolShare = (unitData: UnitData, pool: PoolData): StakeData => {\n  // formula: (rune * part) / total; (asset * part) / total\n  const units = unitData.stakeUnits.amount()\n  const total = unitData.totalUnits.amount()\n  const R = pool.runeBalance.amount()\n  const T = pool.assetBalance.amount()\n  const asset = T.times(units).div(total)\n  const rune = R.times(units).div(total)\n  const stakeData = {\n    asset: baseAmount(asset),\n    rune: baseAmount(rune),\n  }\n  return stakeData\n}\n\nexport const getSlipOnStake = (stake: StakeData, pool: PoolData): BigNumber => {\n  // formula: (t * R - T * r)/ (T*r + R*T)\n  const r = stake.rune.amount()\n  const t = stake.asset.amount()\n  const R = pool.runeBalance.amount()\n  const T = pool.assetBalance.amount()\n  const numerator = t.times(R).minus(T.times(r))\n  const denominator = T.times(r).plus(R.times(T))\n  const result = numerator.div(denominator).abs()\n  return result\n}\n","import { BaseAmount, Asset } from './types'\n\n/**\n * Memo to swap\n *\n * @param asset Asset to swap\n * @param address Destination `address` to swap and send to someone. If `address` is emtpy, it sends back to self\n * @param limit Price protection. If the value isn't achieved then it is refunded.\n * ie, set 10000000 to be garuanteed a minimum of 1 full asset.\n * If LIM is ommitted, then there is no price protection\n *\n * @see https://docs.thorchain.org/developers/transaction-memos#transactions\n */\nexport const getSwapMemo = ({\n  asset: { chain, symbol },\n  address = '',\n  limit,\n}: {\n  asset: Asset\n  address?: string\n  limit?: BaseAmount\n}) => `SWAP:${chain}.${symbol}:${address}:${limit?.amount().toString() ?? ''}`\n\n/**\n * Memo to deposit\n *\n * @param asset Asset to deposit into a specified pool\n * @param address (optional) For cross-chain deposits, an address is needed to cross-reference addresses\n * @see https://docs.thorchain.org/developers/transaction-memos#transactions\n */\nexport const getDepositMemo = ({ chain, symbol }: Asset, address = '') => `STAKE:${chain}.${symbol}:${address}`\n\n/**\n * Memo to withdraw\n *\n * @param asset Asset to withdraw from a pool\n * @param percent Percent is in basis points (0-10000, where 10000=100%)\n *\n * @see https://docs.thorchain.org/developers/transaction-memos#transactions\n */\nexport const getWithdrawMemo = ({ chain, symbol }: Asset, percent: number) =>\n  `WITHDRAW:${chain}.${symbol}:${percent.toString()}`\n"],"names":["BigNumber","Denomination","trimZeros","trimZerosHelper","AssetCurrencySymbol"],"mappings":"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"}